{"version":3,"sources":["components/Text.js","components/Card.js","components/Column.js","components/Button.js","components/GlobalStyles.js","hooks/useThemeMode.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","fontSize","theme","colors","text","width","height","surface","Text","text2","button","createGlobalStyle","background","useThemeMode","themeOS","window","matchMedia","matches","localTheme","localStorage","getItem","useState","setTheme","useEffect","setItem","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wXAWeA,UAAOC,IAAtB,KACe,oBAAGC,SAAH,kBAAc,OAAd,KACJ,qBAAGC,MAAkBC,OAAOC,Q,6mBCHnBL,IAAOC,IAAV,KACN,oBAAGK,MAAH,kBAAW,QAAX,KACC,oBAAGC,OAAH,kBAAY,QAAZ,KACU,qBAAGJ,MAAkBC,OAAOI,WAYpCR,YAAOS,EAAPT,CAAH,KAKEA,IAAOC,IAAV,KACC,qBAAGE,MAAkBC,OAAOM,S,sJCzBxBV,IAAOC,IAAtB,K,kMCCqBD,IAAOW,OAAV,KAGI,qBAAGR,MAAkBC,OAAOM,SACvC,qBAAGP,MAAkBC,OAAOM,S,wWCFxBE,YAAf,KAOwB,qBAAGT,MAAkBC,OAAOS,cAPrCD,IC6DAE,EA/DM,WAAO,IAAD,EASnBC,GACE,QAAN,EAAAC,cAAA,eAAQC,WAAW,gCAAgCC,SAC/C,OACA,UASAC,EAAaH,OAAOI,aAAaC,QAAQ,SArBtB,EAsBCC,mBAAS,WAtBV,mBAsBlBnB,EAtBkB,KAsBXoB,EAtBW,KA8BzBC,qBAAU,WAKRT,IAAYI,EACRI,EAASR,GACTI,GAAcI,EAASJ,KAC1B,IAsBH,MAAO,CAAChB,EAfY,WAClB,GAAc,YAAVA,EAGF,OAFAa,OAAOI,aAAaK,QAAQ,QAAS,aACrCF,EAAS,QAIXP,OAAOI,aAAaK,QAAQ,QAAS,WACrCF,EAAS,cCEEG,MAjCf,WAAe,MAKgBZ,IALhB,8BCjBKa,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05d1f885.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\n/**\n * Esto es un componente estilizado con styled-components,\n * recuerda que puede funciónar como cualquier otro componente de react,\n * le podemos pasar props, aqui estamos recibiendo las prop \"fontSize\",\n * para poder reutilizarlo y diferentes partes del proyecto y sea dinamico.\n * \n * La prop \"theme\" es la que le pasamos a nuestro <ThemeProvider theme={themes[theme]} />\n * y podemos acceder a los valores del tema actual.\n */\nexport default styled.div`\n  font-size: ${({ fontSize = \"25px\" }) => fontSize};\n  color: ${({ theme }) => theme.colors.text};\n  font-weight: 300;\n  margin: 0px 10px;\n`;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport Text from \"./Text\";\nimport { ThemeContext } from \"styled-components\";\n\n/**\n * Los componentes WrapperCard, Title e Info, los mantuve en este archivo\n * ya que no los utilizamos en ningun otro lado mas, si no lo sacaria en nuestra \n * carpeta de /components ya que ahi estan los componentes reutilizables.\n */\nconst WrapperCard = styled.div`\n  width: ${({ width = \"200px\" }) => width};\n  height: ${({ height = \"120px\" }) => height};\n  background-color: ${({ theme }) => theme.colors.surface};\n  border-radius: 2px;\n  margin: 5px;\n  flex-grow: 1;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  padding: 10px;\n  align-items: center;\n  justify-content: space-around;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled(Text)`\n  font-weight: 600;\n  font-size: 18px;\n`;\n\nconst Info = styled.div`\n  color: ${({ theme }) => theme.colors.text2};\n  font-weight: 300;\n  font-size: 70px;\n`;\n\nconst Card = ({ title, height, text }) => {\n  /**\n   * No solamente tenemos acceso al valor del tema en componentes\n   * como los de arriba si no en cualquier otro componente de react.\n   * Estamos utilizando con \"ThemeContext\" para obtener el tema activo\n   * y asi poder usar sus valores si se desea.\n   */\n  const themeContext = useContext(ThemeContext);\n  console.log(themeContext);\n  return (\n    <WrapperCard height={height}>\n      <Title>{title}</Title>\n      <Info>{text}</Info>\n    </WrapperCard>\n  );\n};\n\nexport default Card;\n","import styled from \"styled-components\";\n\n/**\n * Para generar las columnas con ayuda de \n * styled-components.\n */\nexport default styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * Recuerda afectar el tema en los componentes\n * donde necesitemos.\n */\nconst StyledButton = styled.button`\n  background: none;\n  outline: none;\n  border: 1px solid ${({ theme }) => theme.colors.text2};\n  color: ${({ theme }) => theme.colors.text2};\n  border-radius: 5px;\n  font-size: 15px;\n`;\n\nconst Button = ({ handleClick }) => {\n  return <StyledButton onClick={handleClick}>Toggle Theme</StyledButton>;\n};\n\nexport default Button;\n","import { createGlobalStyle } from \"styled-components\";\n\n/**\n * createGlobalStyle es una función de styled-components\n * donde nos ayuda a crear estilos base para todos nuestro sistema como\n * aqui por ejemplo estoy afectando a la etiqueta body.\n * \n * Recuerda utilizar los valores del tema en los componentes que necesites.\n */\nexport default createGlobalStyle`\n  body {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-content: center;\n    height: 100vh;\n    background-color: ${({ theme }) => theme.colors.background};\n    transition: all 0.15s linear;\n    margin: 0;\n    font-family: \"Roboto\";\n    font-weight: 300;\n    padding: 15px;\n  }\n`;\n","import { useState, useEffect } from \"react\";\n\n/**\n * Nuestro custom hook donde encapsula\n * la lógica del componente para intercambiar\n * entre el tema dark y el default.\n */\nconst useThemeMode = () => {\n  /**\n   * UPDATE (01/08/2020): Verificamos el tema del sistema operativo\n   * para saber si es dark o light, con la propiedad css\n   * \"prefers-color-scheme\" y asignarlo como default.\n   *\n   * https://caniuse.com/#search=prefers-color-scheme\n   *\n   */\n  const themeOS =\n    window?.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      ? \"dark\"\n      : \"default\";\n\n  /**\n   * Usamos el localStorage ya que tuvimos un problema\n   * al recargar la página se reinicia el state y regresa a nuestro\n   * tema default, para evitar esto guardamos el nombre del tema\n   * en el localStorage para mantener la selección del usuario,\n   * incluso cuando se recargue la página.\n   */\n  const localTheme = window.localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState(\"default\");\n\n  /**\n   * El hook useEffect(), nos ayuda a representar el\n   * ciclo de vida componentDidMount, ya que le estamos pasando\n   * un arreglo vacio y nos sirve para asignar el tema si existe\n   * en el localStorage.\n   */\n  useEffect(() => {\n    /**\n     * UPDATE (01/08/2020): Tomamos como prioridad el sistema operativo, en caso\n     * que no exista un tema guardado en el local storage.\n     */\n    themeOS && !localTheme\n      ? setTheme(themeOS)\n      : localTheme && setTheme(localTheme);\n  }, []);\n\n  /**\n   * Esta función simplemente hace el intercambio entre\n   * temas si el activo es dark lo cambia default y si es default\n   * lo cambia a dark.\n   */\n  const toggleTheme = () => {\n    if (theme === \"default\") {\n      window.localStorage.setItem(\"theme\", \"dark\");\n      setTheme(\"dark\");\n      return;\n    }\n\n    window.localStorage.setItem(\"theme\", \"default\");\n    setTheme(\"default\");\n  };\n\n  /**\n   * Nuestro custom hook retorna nuestra variable de\n   * estado y la función que realiza el toggle al tema.\n   */\n  return [theme, toggleTheme];\n};\n\nexport default useThemeMode;\n","import React from \"react\";\nimport { Card, Column, Text, GlobalStyles, Button } from \"./components\";\nimport { ThemeProvider } from \"styled-components\";\nimport { useThemeMode } from \"./hooks\";\n\n/**\n * Esta es la configuración de nuestro temas\n * aqui podrías agregar los que necesites y tener una\n * gran variedad para tus usuarios.\n */\nconst themes = {\n  default: {\n    colors: {\n      background: \"#f1f1f1\", // Color de fondo\n      surface: \"#FFF\", // Color de fondo de tarjetas.\n      text: \"#989898\", // Color del texto\n      text2: \"#000\", // Color de las cantidades\n    },\n  },\n  dark: {\n    colors: {\n      background: \"#23292d\",\n      surface: \"#32383b\",\n      text: \"#FFF\",\n      text2: \"#317e94\",\n    },\n  },\n};\n\nfunction App() {\n\n  /**\n   * El uso de nuestro custom hook.\n   */\n  const [theme, toggleTheme] = useThemeMode();\n\n  return (\n    /**\n     * Recuerda que el componente ThemeProvider, recibe una prop\n     * theme, esta la estamos generando con ayuda de nuestra variable\n     * de estado \"theme\" ya que ahi tenemos el nombre del tema actual, \n     * y accedemos a nuestra configuración de \"theme\" para obtener \n     * el objeto.\n     */\n    <ThemeProvider theme={themes[theme]}>\n      <GlobalStyles />\n      <Column>\n        <Text>Weekly Stats - Moguelo Dev</Text>\n        <Button handleClick={toggleTheme} />\n      </Column>\n      <Column>\n        <Card title=\"Marketing\" text=\"25%\" />\n        <Card title=\"Conversion\" text=\"4.3M\" />\n        <Card title=\"Users\" text=\"+20M\" />\n      </Column>\n      <Column>\n        <Card title=\"Sales\" height=\"120px\" text=\"$0.00\" />\n      </Column>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}