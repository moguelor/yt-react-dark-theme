{"version":3,"sources":["components/Wrapper.js","components/Text.js","components/Card.js","components/Column.js","components/Button.js","components/Content.js","hooks/useThemeMode.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","theme","colors","background","fontSize","text","width","height","surface","Text","text2","button","useThemeMode","useState","window","localStorage","getItem","setTheme","useEffect","localTheme","setItem","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sfAEeA,IAAOC,IAAtB,KAMsB,qBAAEC,MAAkBC,OAAOC,c,mJCNlCJ,UAAOC,IAAtB,KACe,qBAAGI,UAA2B,UAClC,qBAAEH,MAAkBC,OAAOG,Q,6mBCAlBN,IAAOC,IAAV,KACN,qBAAGM,OAAqB,WACvB,qBAAGC,QAAuB,WAChB,qBAAGN,MAAkBC,OAAOM,WAYpCT,YAAOU,EAAPV,CAAH,KAKEA,IAAOC,IAAV,KAGC,qBAAGC,MAAkBC,OAAOQ,S,sJCzBxBX,IAAOC,IAAtB,K,kMCCqBD,IAAOY,OAAV,KAGI,qBAAEV,MAAkBC,OAAOQ,SACtC,qBAAET,MAAkBC,OAAOQ,S,0FCLvBX,IAAOC,IAAtB,KAAeD,ICsBAa,EAtBM,WAAO,IAAD,EACCC,mBAASC,OAAOC,aAAaC,QAAQ,UADtC,mBAClBf,EADkB,KACXgB,EADW,KAGzBC,qBAAU,WACR,IAAMC,EAAaL,OAAOC,aAAaC,QAAQ,SAC/CG,GAAcF,EAASE,KACtB,IAaH,MAAO,CAAClB,EAXY,WAClB,GAAc,YAAVA,EAGF,OAFAa,OAAOC,aAAaK,QAAQ,QAAS,aACrCH,EAAS,QAIXH,OAAOC,aAAaK,QAAQ,QAAS,WACrCH,EAAS,cCmCEI,MAxBf,WAAgB,IAAD,EACgBT,IADhB,8BCjBKU,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d50d7351.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-content: center;\n  height: 100vh;\n  background-color: ${({theme}) => (theme.colors.background)};\n  transition: all 0.15s linear;\n`;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  font-size: ${({ fontSize }) => fontSize || \"25px\"};\n  color: ${({theme}) => (theme.colors.text)};\n  font-weight: 300;\n  margin: 0px 10px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Text from \"./Text\";\n\nconst WrapperCard = styled.div`\n  width: ${({ width }) => width || \"200px\"};\n  height: ${({ height }) => height || \"120px\"};\n  background-color: ${({ theme }) => theme.colors.surface};\n  border-radius: 2px;\n  margin: 5px;\n  flex-grow: 1;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  padding: 10px;\n  align-items: center;\n  justify-content: space-around;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled(Text)`\n  font-weight: 600;\n  font-size: 18px;\n`;\n\nconst Info = styled.div`\n  font-weight: 300;\n  font-size: 70px;\n  color: ${({ theme }) => theme.colors.text2};\n`;\n\nconst Card = ({ title, height, text }) => {\n  return (\n    <WrapperCard height={height}>\n      <Title>{title}</Title>\n      <Info>{text}</Info>\n    </WrapperCard>\n  );\n};\n\nexport default Card;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled.button`\n  background: none;\n  outline: none;\n  border: 1px solid ${({theme}) => (theme.colors.text2)};\n  color: ${({theme}) => (theme.colors.text2)};\n  border-radius: 5px;\n  font-size: 15px;\n`;\n\nconst Button = ({ handleClick }) => {\n  return (\n      <StyledButton onClick={handleClick}>\n        Toggle Theme\n      </StyledButton>\n  );\n};\n\nexport default Button;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  max-width: 60%;\n`;\n","import { useState, useEffect } from \"react\";\n\nconst useThemeMode = () => {\n  const [theme, setTheme] = useState(window.localStorage.getItem(\"theme\"));\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    localTheme && setTheme(localTheme);\n  }, []);\n\n  const toggleTheme = () => {\n    if (theme === \"default\") {\n      window.localStorage.setItem(\"theme\", \"dark\");\n      setTheme(\"dark\");\n      return;\n    }\n\n    window.localStorage.setItem(\"theme\", \"default\");\n    setTheme(\"default\");\n  };\n\n  return [theme, toggleTheme];\n};\n\nexport default useThemeMode;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Wrapper, Card, Column, Text, Button, Content } from \"./components\";\nimport { useThemeMode } from \"./hooks\";\n\nconst themes = {\n  default: {\n    colors: {\n      primary: \"#FFF\", // Color principal de la aplicaci√≥n.\n      accent: \"#000\", // Color secundario\n      background: \"#f1f1f1\", // Color de fondo\n      surface: \"#FFF\", // Color de fondo de elemento que contienen algo.\n      text: \"#989898\", // Color del texto\n      text2: \"#000\", // Color de las cantidades\n    },\n  },\n  dark: {\n    colors: {\n      primary: \"#FFF\",\n      accent: \"#000\",\n      background: \"#23292d\",\n      surface: \"#32383b\",\n      text: \"#FFF\",\n      text2: \"#317e94\",\n    },\n  },\n};\n\nfunction App() {\n  const [theme, toggleTheme] = useThemeMode();\n  return (\n    // <ThemeProvider theme={themes[theme]}>\n      <Wrapper>\n        <Content>\n          <Column>\n            <Text>Weekly Stats - Moguelo Dev</Text>\n            <Button handleClick={toggleTheme} />\n          </Column>\n          <Column>\n            <Card title=\"Marketing\" text=\"25%\" />\n            <Card title=\"Conversion\" text=\"4.3M\" />\n            <Card title=\"Users\" text=\"+20M\" />\n          </Column>\n          <Column>\n            <Card title=\"Sales\" height=\"120px\" text=\"$0.00\" />\n          </Column>\n        </Content>\n      </Wrapper>\n    // </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}